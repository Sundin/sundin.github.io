<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>_drafts on Master of Software Engineering</title><link>/_drafts/</link><description>Recent content in _drafts on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 03 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="/_drafts/feed.xml" rel="self" type="application/rss+xml"/><item><title>Anki Best Practices</title><link>/_drafts/anki-best-practices/</link><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><guid>/_drafts/anki-best-practices/</guid><description>Use cloze questions. Include images in both questions and answers. Provide personal context will help you with memorizing (like where your first learned it, examples from your life etc). Use screenshots if you don&amp;rsquo;t want to spend time formulas and code snippets. Avoid transparent backgrounds in case you switch between dark/light modes or different clients (Desktop/iOS/Android etc). Avoid having lists as answers. You can add more details and context in the answer part to refresh your memory on a topic.</description></item><item><title/><link>/_drafts/architecture-matters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/_drafts/architecture-matters/</guid><description>Architecture matters. Good architecture enables you to increase velocity by adding more manpower. Good architecture can only be attainted by making sure any given change can be kept to one isolated corner of the codebase. A word of caution to avoid misunderstandings here. While MVC is an example of a sound architectural pattern, structuring your code into M,V and C folders is not! Any given change would require you to make changes to all 3 folders, thus violating the principle of isolated changes.</description></item><item><title/><link>/_drafts/good-readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/_drafts/good-readme/</guid><description>Have a good readme file. Getting started + high level architecture + references for future reading.</description></item><item><title/><link>/_drafts/random/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/_drafts/random/</guid><description>Make sure you have proper access, but no more. Have the same access level in staging and prod.
Leave nothing to chance Specify exact version numbers
Zero bug policy
Expectation management
Prognosis vs estimates vs prioritization
Project vs product mindset</description></item></channel></rss>