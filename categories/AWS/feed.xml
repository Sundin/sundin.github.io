<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS on Master of Software Engineering</title><link>/categories/AWS/</link><description>Recent content in AWS on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 08 Apr 2021 09:25:58 +0000</lastBuildDate><atom:link href="/categories/AWS/feed.xml" rel="self" type="application/rss+xml"/><item><title>Minimize Java Lambda Cold Start Times</title><link>/post/2021-04-08-minimize-java-lambda-coldstarts/</link><pubDate>Thu, 08 Apr 2021 09:25:58 +0000</pubDate><guid>/post/2021-04-08-minimize-java-lambda-coldstarts/</guid><description>If you have ever run Java inside a lambda function on AWS, you will have noticed the quite significant cold start times that comes with spinning up the JVM environment. In this post, I will discuss some different tricks you can use to minimize these cold start times.
The problem with cold starts arises when there are no &amp;ldquo;warm&amp;rdquo; lambda available to handle an incoming request, which usally happens whenever an endpoint experiences a large and sudden spike in traffic.</description></item><item><title>Migrating data between DynamoDB tables</title><link>/post/2021-03-30-dynamodb-migrations/</link><pubDate>Tue, 30 Mar 2021 10:34:41 +0000</pubDate><guid>/post/2021-03-30-dynamodb-migrations/</guid><description>When setting up a new DynamoDB table, an important decision is to decide what primary key to use. However, it’s not uncommon to not have the full picture up front and therefore it could be hard to make the right decision beforehand. While the official AWS documentation states that “you shouldn’t start designing your schema for DynamoDB until you know the questions it will need to answer”, you often need to experiment to be able to discover what those questions are.</description></item></channel></rss>