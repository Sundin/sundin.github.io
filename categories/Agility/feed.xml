<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Agility on Master of Software Engineering</title><link>/categories/Agility/</link><description>Recent content in Agility on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 25 Jan 2019 11:10:38 +0000</lastBuildDate><atom:link href="/categories/Agility/feed.xml" rel="self" type="application/rss+xml"/><item><title>Agile Evolution</title><link>/Agile-Evolution/</link><pubDate>Fri, 25 Jan 2019 11:10:38 +0000</pubDate><guid>/Agile-Evolution/</guid><description>Everything in nature goes in circles. Days turn into night in a circadian rhythm. Seasons replace each other.
Even life itself is iterative.
In every generation, a small number of genes gets changed due to random mutations. I’m not a biologist, but through some quick googling I found out that the human genome changes with a mutation rate of about 10-8per generation. This is obviously a number that natural selection has arrived at and found optimal.</description></item><item><title>Why requirements don't work</title><link>/Why-requirements-dont-work/</link><pubDate>Thu, 03 Jan 2019 08:17:49 +0000</pubDate><guid>/Why-requirements-dont-work/</guid><description>A co-worker recently helped me understand why requirements usually don’t work in practice. Non-technical customers will inevitably come up with very fuzzy requirements and usually only have a vague idea of what they really want. Customers with technical knowledge, on the other hand, have more often than not already thought out a solution and will not even bother to describe the problem they are aiming to solve. So what can be done about it?</description></item><item><title>Kafkaesque Software Development</title><link>/Kafkaesque-Software-Development/</link><pubDate>Wed, 12 Dec 2018 16:54:01 +0000</pubDate><guid>/Kafkaesque-Software-Development/</guid><description>Will a new feature add value or decrease it?
A common danger to many software engineering efforts is feature creep. This is when we keep adding new and shiny features to our product, potentially rendering it less and less useful as we clutter the interface and makes harder and harder to find the few features that actually made our product valuable. A related problem is scope creep. This is when the stakeholders keep coming up with new requirements, delaying the project&amp;rsquo;s launch date more and more.</description></item><item><title>Efficiency vs Effectiveness</title><link>/Efficiency-vs-Effectiveness/</link><pubDate>Wed, 31 Oct 2018 13:05:15 +0000</pubDate><guid>/Efficiency-vs-Effectiveness/</guid><description>In Swedish, &amp;ldquo;efficiency&amp;rdquo; and &amp;ldquo;effectiveness&amp;rdquo; are both translated into the same word. With Swedish being my mother tongue, this leads me to sometimes mixing these terms up. This article describes the difference between the two concepts, and why both are important to understand.
The influential author Peter Drucker defined the difference between being efficient and being effective in the following way in his management book The Effective Executive: The Definitive Guide to Getting the Right Things Done:</description></item></channel></rss>