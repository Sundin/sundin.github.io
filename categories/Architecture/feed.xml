<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture on Master of Software Engineering</title><link>/categories/Architecture/</link><description>Recent content in Architecture on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="/categories/Architecture/feed.xml" rel="self" type="application/rss+xml"/><item><title>Robust end-to-end testing with Docker Compose</title><link>/e2e-tests-with-docker-compose/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>/e2e-tests-with-docker-compose/</guid><description>End-to-end (E2E) testing is a powerful tool for automated quality assurance. Ideally you want to be able to catch potential errors and bugs already on the unit testing level, but doing so can sometimes be both time-consuming and difficult. Unit testing also relies heavily on mocking out dependencies by nature, so we cannot necessarily guarantee the same behaviour as in our live application. E2E tests are on the other hand often very straightforward to set up and write, and enables us to construct very realistic testing scenarios.</description></item><item><title>Breaking synchronous dependencies</title><link>/Breaking-synchronous-dependencies/</link><pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate><guid>/Breaking-synchronous-dependencies/</guid><description>A common challenge in software development is how to decide and then fulfill non-functional requirements, such as the maximum response times of your API. Two metrics to consider is the average response time of a certain endpoint, as well as the percentage of outlier requests that will fall outside of the accepted time bounds. Such outliers will always be there, especially when designing a microservice architecture using lambdas with their dreaded cold starts which is common these days.</description></item></channel></rss>