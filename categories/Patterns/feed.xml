<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Patterns on Master of Software Engineering</title><link>/categories/Patterns/</link><description>Recent content in Patterns on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="/categories/Patterns/feed.xml" rel="self" type="application/rss+xml"/><item><title>Robust end-to-end testing with Docker Compose</title><link>/e2e-tests-with-docker-compose/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>/e2e-tests-with-docker-compose/</guid><description>End-to-end (E2E) testing is a powerful tool for automated quality assurance. Ideally you want to be able to catch potential errors and bugs already on the unit testing level, but doing so can sometimes be both time-consuming and difficult. Unit testing also relies heavily on mocking out dependencies by nature, so we cannot necessarily guarantee the same behaviour as in our live application. E2E tests are on the other hand often very straightforward to set up and write, and enables us to construct very realistic testing scenarios.</description></item><item><title>Avoid using else statements</title><link>/patterns/refactoring/2021/04/12/avoid-else.html/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>/patterns/refactoring/2021/04/12/avoid-else.html/</guid><description>Let&amp;rsquo;s take a simple example from the world of JavaScript, where we can&amp;rsquo;t be certain of the type of a variable up front. Let&amp;rsquo;s say we have a function (myFunction) which we can either pass a string or an array of strings. If we pass it a string, we want to do something with that string. If we pass it an array, we want to do the same thing for each element in the array.</description></item><item><title>Whole Value Pattern</title><link>/Whole-Value-Pattern/</link><pubDate>Thu, 04 Oct 2018 14:26:45 +0000</pubDate><guid>/Whole-Value-Pattern/</guid><description>The Whole Value Pattern is a pattern first described by Ward Cunningham in 1994. It simply implies that a value should always be stored together with its corresponding unit, which together forms a &amp;ldquo;whole value&amp;rdquo;. A lone numerical value is usually not meaningful on its own, without a corresponding unit, and is therefore a violation of this pattern.
The main benefit of following the Whole Value Pattern is that implicit developer knowledge can be made explicit in the codebase instead.</description></item><item><title>Refactor Responsibly</title><link>/Refactor-Responsibly/</link><pubDate>Sat, 22 Sep 2018 20:34:11 +0000</pubDate><guid>/Refactor-Responsibly/</guid><description>Rewriting a large piece of software from scratch is usually not a good idea, regardless of how messy or problematic the original/legacy code is. The reason is that you never know how long the rewrite is gonna take, what unexpected problems you might run into or even if your new solution is gonna be any better than the old. You might end up spending several months on refactoring without any possibility of releasing anything into production until the rewrite is complete.</description></item></channel></rss>