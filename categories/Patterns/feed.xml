<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Patterns on Master of Software Engineering</title><link>/categories/Patterns/</link><description>Recent content in Patterns on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/Patterns/feed.xml" rel="self" type="application/rss+xml"/><item><title>Token-Based Authorization in .NET Core 6.0</title><link>/token-based-authorization-in-dotnet/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>/token-based-authorization-in-dotnet/</guid><description>This blog post describes how to implement token-based authentication and authorization using .NET Core 6.0.
The way this works is that when the user is authenticated, a token containing various claims will be stored in the user&amp;rsquo;s browser. This cookie will be used in subsequent requests, and the claims can be checked on different endpoints in order to provide authorization.
Now let&amp;rsquo;s get coding!
Inside Startup.cs, add the following to the ConfigureServices(IServiceCollection services) method:</description></item><item><title>Avoid using else statements</title><link>/patterns/refactoring/2021/04/12/avoid-else.html/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>/patterns/refactoring/2021/04/12/avoid-else.html/</guid><description>Let&amp;rsquo;s take a simple example from the world of JavaScript, where we can&amp;rsquo;t be certain of the type of a variable up front. Let&amp;rsquo;s say we have a function (myFunction) which we can either pass a string or an array of strings. If we pass it a string, we want to do something with that string. If we pass it an array, we want to do the same thing for each element in the array.</description></item><item><title>Whole Value Pattern</title><link>/Whole-Value-Pattern/</link><pubDate>Thu, 04 Oct 2018 14:26:45 +0000</pubDate><guid>/Whole-Value-Pattern/</guid><description>The Whole Value Pattern is a pattern first described by Ward Cunningham in 1994. It simply implies that a value should always be stored together with its corresponding unit, which together forms a &amp;ldquo;whole value&amp;rdquo;. A lone numerical value is usually not meaningful on its own, without a corresponding unit, and is therefore a violation of this pattern.
The main benefit of following the Whole Value Pattern is that implicit developer knowledge can be made explicit in the codebase instead.</description></item></channel></rss>