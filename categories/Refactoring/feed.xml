<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Refactoring on Master of Software Engineering</title><link>/categories/Refactoring/</link><description>Recent content in Refactoring on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/Refactoring/feed.xml" rel="self" type="application/rss+xml"/><item><title>Avoid using else statements</title><link>/patterns/refactoring/2021/04/12/avoid-else.html/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>/patterns/refactoring/2021/04/12/avoid-else.html/</guid><description>Let&amp;rsquo;s take a simple example from the world of JavaScript, where we can&amp;rsquo;t be certain of the type of a variable up front. Let&amp;rsquo;s say we have a function (myFunction) which we can either pass a string or an array of strings. If we pass it a string, we want to do something with that string. If we pass it an array, we want to do the same thing for each element in the array.</description></item><item><title>Migrating data between DynamoDB tables</title><link>/Migrating-data-between-DynamoDB-tables/</link><pubDate>Tue, 30 Mar 2021 10:34:41 +0000</pubDate><guid>/Migrating-data-between-DynamoDB-tables/</guid><description>When setting up a new DynamoDB table, an important decision is to decide what primary key to use. However, it’s not uncommon to not have the full picture up front and therefore it could be hard to make the right decision beforehand. While the official AWS documentation states that “you shouldn’t start designing your schema for DynamoDB until you know the questions it will need to answer”, you often need to experiment to be able to discover what those questions are.</description></item><item><title>Breaking synchronous dependencies</title><link>/Breaking-synchronous-dependencies/</link><pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate><guid>/Breaking-synchronous-dependencies/</guid><description>A common challenge in software development is how to decide and then fulfill non-functional requirements, such as the maximum response times of your API. Two metrics to consider is the average response time of a certain endpoint, as well as the percentage of outlier requests that will fall outside of the accepted time bounds. Such outliers will always be there, especially when designing a microservice architecture using lambdas with their dreaded cold starts which is common these days.</description></item><item><title>Refactor responsibly</title><link>/Refactor-Responsibly/</link><pubDate>Sat, 22 Sep 2018 20:34:11 +0000</pubDate><guid>/Refactor-Responsibly/</guid><description>Rewriting a large piece of software from scratch is usually not a good idea, regardless of how messy or problematic the original/legacy code is. The reason is that you never know how long the rewrite is gonna take, what unexpected problems you might run into or even if your new solution is gonna be any better than the old. You might end up spending several months on refactoring without any possibility of releasing anything into production until the rewrite is complete.</description></item></channel></rss>