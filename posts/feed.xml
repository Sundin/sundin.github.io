<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Master of Software Engineering</title><link>/posts/</link><description>Recent content in Posts on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Jun 2021 14:58:32 +0200</lastBuildDate><atom:link href="/posts/feed.xml" rel="self" type="application/rss+xml"/><item><title>Automatic Audit Logs in .NET</title><link>/dotnet-audit-logs/</link><pubDate>Mon, 21 Jun 2021 14:58:32 +0200</pubDate><guid>/dotnet-audit-logs/</guid><description>A common requirement for most serious applications is to be able to produce audit logs: information about which user has accessed what information and when.
In the .NET Core 5.0 API we are building right now, we decided to implement this functionality as a middleware that will automatically be executed upon every request to the API.
We want to log the response actually sent back to the client, so it&amp;rsquo;s important that we put our new middleware first (or at least very early) in the HTTP request pipeline.</description></item><item><title>How to Build a Reverse Proxy</title><link>/nginx-reverse-proxy/</link><pubDate>Mon, 21 Jun 2021 10:58:32 +0200</pubDate><guid>/nginx-reverse-proxy/</guid><description>In this blog post I will describe how you can deploy services on the same server. The server will be fronted by an NGINX instance acting as a reverse proxy responsible for forwarding incoming traffic to the right service.
I will use an EC2 instance on AWS since it has a low monthly cost and I don&amp;rsquo;t have to worry about hardware maintenance at all, but you can use the same approach for any kind of server.</description></item><item><title>The Weirdest Error</title><link>/the-weirdest-error/</link><pubDate>Mon, 21 Jun 2021 10:58:32 +0200</pubDate><guid>/the-weirdest-error/</guid><description>A while ago, I stumbled across the weirdest error I have encountered so far during my software development career. It happened after a routine bump of the WordPress version running the WooCommerce web shop of my record label. Everything seemed to be running fine, but then one customer reported that the checkout was broken (very bad for a web shop). I verified that I could reproduce the error on my own and started troubleshooting.</description></item><item><title>Code Review Reflections</title><link>/code-review-reflections/</link><pubDate>Sun, 09 May 2021 08:31:41 +0000</pubDate><guid>/code-review-reflections/</guid><description>The quality of the code reviews within your organization will over time have an huge impact on the overall success of your business. Missing or poor code reviews will lead to deteriorating quality and much headache will follow, while good code reviews will ensure that your code base maintains a high and increasing quality. More importantly, code reviews also acts a way to share knowledge within the team. Therefore properly carried out code reviewing is one of the best, cheapest and fastest ways of acquiring skilled developers.</description></item><item><title>A short Kubernetes tutorial</title><link>/kubernetes-tutorial/</link><pubDate>Wed, 14 Apr 2021 08:31:41 +0000</pubDate><guid>/kubernetes-tutorial/</guid><description>Currently I&amp;rsquo;m learning Kubernetes and Flux. Two of my top three favourite methods for learning something is to write about it and to teach it to someone else. This time I combined the two into a short tutorial on what I have learnt so far. If you are interested, you will find my Kubernetes tutorial on Github!</description></item><item><title>Avoid using else statements</title><link>/patterns/refactoring/2021/04/12/avoid-else.html/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>/patterns/refactoring/2021/04/12/avoid-else.html/</guid><description>Let&amp;rsquo;s take a simple example from the world of JavaScript, where we can&amp;rsquo;t be certain of the type of a variable up front. Let&amp;rsquo;s say we have a function (myFunction) which we can either pass a string or an array of strings. If we pass it a string, we want to do something with that string. If we pass it an array, we want to do the same thing for each element in the array.</description></item><item><title>Minimize Java Lambda Cold Start Times</title><link>/implementation/aws/2021/04/08/minimize-java-lambda-coldstarts.html/</link><pubDate>Thu, 08 Apr 2021 09:25:58 +0000</pubDate><guid>/implementation/aws/2021/04/08/minimize-java-lambda-coldstarts.html/</guid><description>If you have ever run Java inside a lambda function on AWS, you will have noticed the quite significant cold start times that comes with spinning up the JVM environment. In this post, I will discuss some different tricks you can use to minimize these cold start times.
The problem with cold starts arises when there are no &amp;ldquo;warm&amp;rdquo; lambda available to handle an incoming request, which usually happens whenever an endpoint experiences a large and sudden spike in traffic.</description></item><item><title>Migrating data between DynamoDB tables</title><link>/Migrating-data-between-DynamoDB-tables/</link><pubDate>Tue, 30 Mar 2021 10:34:41 +0000</pubDate><guid>/Migrating-data-between-DynamoDB-tables/</guid><description>When setting up a new DynamoDB table, an important decision is to decide what primary key to use. However, it’s not uncommon to not have the full picture up front and therefore it could be hard to make the right decision beforehand. While the official AWS documentation states that “you shouldn’t start designing your schema for DynamoDB until you know the questions it will need to answer”, you often need to experiment to be able to discover what those questions are.</description></item><item><title>DNS Record Types</title><link>/DNS-Record-Types/</link><pubDate>Wed, 11 Nov 2020 14:28:20 +0000</pubDate><guid>/DNS-Record-Types/</guid><description>In this blog post I will briefly explain some of the most common DNS record types.
A (address) record: always points to a static IP address. AAAA record: the same as the A type record, but for IPv6 IP addresses. CNAME (canonical name) record: alias to another name (=domain), which can be an A record or another CNAME record. The only exception is that you cannot create a CNAME record in the zone apex (the root of your domain).</description></item><item><title>How I Read a Book</title><link>/How-I-Read-a-Book/</link><pubDate>Wed, 14 Oct 2020 11:28:50 +0000</pubDate><guid>/How-I-Read-a-Book/</guid><description>I read at least 25 books per year, both fiction and non-fiction. I have also worked out a system in order to get as much out of each of these books as possible, and most importantly to actually remember what I read. Today I would like to share my system in case it might help someone else.
This is how I read a book.
What to read This might sound like an obviously important topic, but don&amp;rsquo;t worry too much about what to read.</description></item><item><title>Analytics without third-party tools</title><link>/Analytics-without-third-party-tools/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>/Analytics-without-third-party-tools/</guid><description>Finding out how much traffic your site has and how your users interact with it is always crucial. Such information will enable you to scale your backend properly, fine-tune the user experience and weed out unused features. Some even go so far as claiming that data is the &amp;ldquo;gold of our time&amp;rdquo;. Regardless of the truth of that claim, few can dispute the usefulness of user analytics data.
The go-to solution for most developers is to use Google Analytics (in fact used by 55% of all websites) or some other third party framework.</description></item><item><title>Breaking Synchronous Dependencies</title><link>/Breaking-Synchronous-Dependencies/</link><pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate><guid>/Breaking-Synchronous-Dependencies/</guid><description>A common challenge in software development is how to decide and then fulfill non-functional requirements, such as the maximum response times of your API. Two metrics to consider is the average response time of a certain endpoint, as well as the percentage of outlier requests that will fall outside of the accepted time bounds. Such outliers will always be there, especially when designing a microservice architecture using lambdas with their dreaded cold starts which is common these days.</description></item><item><title>The Ethics of Software Engineering</title><link>/The-Ethics-of-Software-Engineering/</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><guid>/The-Ethics-of-Software-Engineering/</guid><description>I believe software developers have just as high ethical responsibilities as engineers within other disciplines. Many engineers (and other professionals) do for example not want to work with weapons, animal experiments and so on. My opinion is that you should consider the ethical implications of your work even if you are within a more &amp;ldquo;mundane&amp;rdquo; field such as e-commerce or game development.
This is especially important considering the fact that we are just a limited number of people with the knowledge how to develop the applications that are used by the majority of the world&amp;rsquo;s population.</description></item><item><title>Testing: Best Practices</title><link>/testing-best-practices/</link><pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate><guid>/testing-best-practices/</guid><description>In this post I will describe a number of best practices I find useful to keep in mind when writing tests. It is intended to act as a complement to my previous post, A successful testing strategy.
Code coverage &amp;ldquo;100% code coverage tells you nothing, but less than 100% code coverage tells you something.&amp;rdquo; – Unknown
Aiming for covering 100% of your code with tests is probably not realistic and perhaps not very useful neither.</description></item><item><title>A Successful Testing Strategy</title><link>/successful-testing-strategy/</link><pubDate>Wed, 26 Jun 2019 13:00:07 +0000</pubDate><guid>/successful-testing-strategy/</guid><description>Today we will a closer look at the classic testing pyramid and see how we can transform that into a concrete strategy for how to write your tests. While the terminology I use is not exactly the same as the one used by Mike Cohn when he first described the testing pyramid in his book Succeeding with Agile, the core concepts remain the same – a strong foundation of unit tests, complemented with a sufficient number of component tests (which are similar to Cohn&amp;rsquo;s service tests) and sprinkled with a few end-to-end tests (which are called UI tests by Cohn) as a last line of defense.</description></item><item><title>Dockerized database testing</title><link>/dockerized-db-tests/</link><pubDate>Fri, 29 Mar 2019 11:11:30 +0000</pubDate><guid>/dockerized-db-tests/</guid><description>In this post I am going to give you an overview of different approaches to use when unit testing your backend code and database calls.
Background In my current project, we have a backend written in Go and a PostgreSQL database. We have for a long time been writing unit tests for the backend to be able to guarantee that the code is working as intended. In order to not have to rely on a database connection and be dependent on the state of the data in that database, we chose to mock away all database calls using a tool called go-sqlmock in the unit tests.</description></item><item><title>Unix Tools</title><link>/Unix-Tools/</link><pubDate>Thu, 21 Mar 2019 13:33:20 +0000</pubDate><guid>/Unix-Tools/</guid><description>What is commonly referred to as the Unix tools are a set of commands that are available on all Unix systems. Together, these form part of the basic toolkit for any serious software engineer. You should learn how to use these tools properly, as they can grant you an enormous boost in your daily workflow, and not the least when it comes to automating task and routines, such as in your team&amp;rsquo;s automated CI pipeline.</description></item><item><title>Agile Evolution</title><link>/Agile-Evolution/</link><pubDate>Fri, 25 Jan 2019 11:10:38 +0000</pubDate><guid>/Agile-Evolution/</guid><description>Everything in nature goes in circles. Days turn into night in a circadian rhythm. Seasons replace each other.
Even life itself is iterative.
In every generation, a small number of genes gets changed due to random mutations. I’m not a biologist, but through some quick googling I found out that the human genome changes with a mutation rate of about 10-8per generation. This is obviously a number that natural selection has arrived at and found optimal.</description></item><item><title>Why requirements don't work</title><link>/Why-requirements-dont-work/</link><pubDate>Thu, 03 Jan 2019 08:17:49 +0000</pubDate><guid>/Why-requirements-dont-work/</guid><description>A co-worker recently helped me understand why requirements usually don’t work in practice. Non-technical customers will inevitably come up with very fuzzy requirements and usually only have a vague idea of what they really want. Customers with technical knowledge, on the other hand, have more often than not already thought out a solution and will not even bother to describe the problem they are aiming to solve. So what can be done about it?</description></item><item><title>Kafkaesque Software Development</title><link>/Kafkaesque-Software-Development/</link><pubDate>Wed, 12 Dec 2018 16:54:01 +0000</pubDate><guid>/Kafkaesque-Software-Development/</guid><description>Will a new feature add value or decrease it?
A common danger to many software engineering efforts is feature creep. This is when we keep adding new and shiny features to our product, potentially rendering it less and less useful as we clutter the interface and makes harder and harder to find the few features that actually made our product valuable. A related problem is scope creep. This is when the stakeholders keep coming up with new requirements, delaying the project&amp;rsquo;s launch date more and more.</description></item><item><title>Efficiency vs Effectiveness</title><link>/efficiency-vs-effectiveness/</link><pubDate>Wed, 31 Oct 2018 13:05:15 +0000</pubDate><guid>/efficiency-vs-effectiveness/</guid><description>In Swedish, &amp;ldquo;efficiency&amp;rdquo; and &amp;ldquo;effectiveness&amp;rdquo; are both translated into the same word. With Swedish being my mother tongue, this leads me to sometimes mixing these terms up. This article describes the difference between the two concepts, and why both are important to understand.
The influential author Peter Drucker defined the difference between being efficient and being effective in the following way in his management book The Effective Executive: The Definitive Guide to Getting the Right Things Done:</description></item><item><title>Whole Value Pattern</title><link>/Whole-Value-Pattern/</link><pubDate>Thu, 04 Oct 2018 14:26:45 +0000</pubDate><guid>/Whole-Value-Pattern/</guid><description>The Whole Value Pattern is a pattern first described by Ward Cunningham in 1994. It simply implies that a value should always be stored together with its corresponding unit, which together forms a &amp;ldquo;whole value&amp;rdquo;. A lone numerical value is usually not meaningful on its own, without a corresponding unit, and is therefore a violation of this pattern.
The main benefit of following the Whole Value Pattern is that implicit developer knowledge can be made explicit in the codebase instead.</description></item><item><title>The Last Week Mindset</title><link>/last-week-mindset/</link><pubDate>Fri, 28 Sep 2018 20:34:11 +0000</pubDate><guid>/last-week-mindset/</guid><description>Being a consultant, I&amp;rsquo;m quite used to switching projects and thus have had a bit of practice in handing off a project to other developers. This has led me to a range of conclusions that I think can benefit every serious software engineer, consultant or not. I would like to summarize these findings into the &amp;ldquo;last week mindset&amp;rdquo;, or; if this was your last week on your current assignment, how would you spend that week?</description></item><item><title>Refactor Responsibly</title><link>/Refactor-Responsibly/</link><pubDate>Sat, 22 Sep 2018 20:34:11 +0000</pubDate><guid>/Refactor-Responsibly/</guid><description>Rewriting a large piece of software from scratch is usually not a good idea, regardless of how messy or problematic the original/legacy code is. The reason is that you never know how long the rewrite is gonna take, what unexpected problems you might run into or even if your new solution is gonna be any better than the old. You might end up spending several months on refactoring without any possibility of releasing anything into production until the rewrite is complete.</description></item><item><title>Welcome!</title><link>/welcome/</link><pubDate>Sat, 22 Sep 2018 17:27:45 +0000</pubDate><guid>/welcome/</guid><description>Welcome to my blog on software engineering!
In my daily work as a software engineer, I read and think a lot on various topics and also write a lot of notes as I do so. My main goal with this website is to gather some of my notes in a single place and in a slightly more readable format. By making everything public it feels like I force myself into cultivating my thoughts and ideas into a more concrete form.</description></item></channel></rss>