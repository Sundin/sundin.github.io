<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Master of Software Engineering</title><link>/tags/Docker/</link><description>Recent content in Docker on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Mar 2019 11:11:30 +0000</lastBuildDate><atom:link href="/tags/Docker/feed.xml" rel="self" type="application/rss+xml"/><item><title>Dockerized database testing</title><link>/dockerized-db-tests/</link><pubDate>Fri, 29 Mar 2019 11:11:30 +0000</pubDate><guid>/dockerized-db-tests/</guid><description>In this post I am going to give you an overview of different approaches to use when unit testing your backend code and database calls.
Background In my current project, we have a backend written in Go and a PostgreSQL database. We have for a long time been writing unit tests for the backend to be able to guarantee that the code is working as intended. In order to not have to rely on a database connection and be dependent on the state of the data in that database, we chose to mock away all database calls using a tool called go-sqlmock in the unit tests.</description></item></channel></rss>