<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Master of Software Engineering</title><link>/tags/Docker/</link><description>Recent content in Docker on Master of Software Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Oct 2021 10:58:32 +0200</lastBuildDate><atom:link href="/tags/Docker/feed.xml" rel="self" type="application/rss+xml"/><item><title>Introducing Frontman</title><link>/Introducing-Frontman/</link><pubDate>Mon, 04 Oct 2021 10:58:32 +0200</pubDate><guid>/Introducing-Frontman/</guid><description>Frontman is a very light-weight NGINX reverse proxy that is deployed using Docker. Its purpose is to act as the entry point to your server. It will redirect incoming traffic to one out of many Docker-based applications running on the same server, based on the hostname in the incoming request.
The rationale behind this is that it enables you to host as many services as you want on the same server, while still only keeping ports 80 and 443 open to the outside world.</description></item><item><title>Setup Raspberry Pi to act as your own web server</title><link>/Setup-Raspberry-Pi-to-act-as-your-own-web-server/</link><pubDate>Fri, 17 Sep 2021 10:58:32 +0200</pubDate><guid>/Setup-Raspberry-Pi-to-act-as-your-own-web-server/</guid><description>In this blog post I will describe how I set up my own web server using just a single Raspberry Pi at home. This is a cheap and fun solution to hosting your own applications, in my case using Docker.
Setting up the Raspberry Pi Install the Raspbian OS on your Raspberry Pi&amp;rsquo;s SD card.
In order to connect wirelessly to the Raspberry without having it connect to a monitor, you need to set up headless SSH.</description></item><item><title>How to Build a Reverse Proxy</title><link>/nginx-reverse-proxy/</link><pubDate>Mon, 28 Jun 2021 10:58:32 +0200</pubDate><guid>/nginx-reverse-proxy/</guid><description>In this blog post I will describe how you can deploy services on the same server. The server will be fronted by an NGINX instance acting as a reverse proxy responsible for forwarding incoming traffic to the right service.
I will use an EC2 instance on AWS since it has a low monthly cost and I don&amp;rsquo;t have to worry about hardware maintenance at all, but you can use the same approach for any kind of server.</description></item><item><title>Dockerized database testing</title><link>/dockerized-db-tests/</link><pubDate>Fri, 29 Mar 2019 11:11:30 +0000</pubDate><guid>/dockerized-db-tests/</guid><description>In this post I am going to give you an overview of different approaches to use when unit testing your backend code and database calls.
Background In my current project, we have a backend written in Go and a PostgreSQL database. We have for a long time been writing unit tests for the backend to be able to guarantee that the code is working as intended. In order to not have to rely on a database connection and be dependent on the state of the data in that database, we chose to mock away all database calls using a tool called go-sqlmock in the unit tests.</description></item></channel></rss>